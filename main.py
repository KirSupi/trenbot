from buttons_and_texts import *
from bot_configuration import *
from telegram.ext import CallbackQueryHandler
from telegram.ext import CommandHandler
from telegram.ext import Updater, MessageHandler, Filters, ConversationHandler
from data import db_session
from data.users import User
from data.payments import Payment

db_session.global_init("db/users.sqlite")

OTHER_BODY, QUESTIONNAIRE_2, QUESTIONNAIRE_3, QUESTIONNAIRE_4, \
QUESTIONNAIRE_5, QUESTIONNAIRE_END, OTHER_BODY_QUESTION = range(
    7)


def answer_to_question_other(update, context):
    query = update.callback_query
    data = query.data
    if data == CALLBACK_BUTTON_I_DONT_WANT:
        update.effective_message.reply_text("–ú—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,"
                                            " —á—Ç–æ–±—ã —Å–∏–ª—å–Ω–µ–µ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≥—Ä—è–¥—É—é—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!")
    if context.user_data['kind of training'] == CALLBACK_BUTTON_GAIN_WEIGHT:
        update.effective_message.reply_text("–î–æ")
        update.effective_message.reply_photo(open('src\img\p1.jpg', 'rb'))
        update.effective_message.reply_text("–ü–æ—Å–ª–µ")
        update.effective_message.reply_photo(open('src\img\p2.jpg', 'rb'))
    if context.user_data['kind of training'] == CALLBACK_BUTTON_LOSE_WEIGHT:
        update.effective_message.reply_text("–î–æ")
        update.effective_message.reply_photo(open('src\img\p3.jpg', 'rb'))
        update.effective_message.reply_text("–ü–æ—Å–ª–µ")
        update.effective_message.reply_photo(open('src\img\p4.jpg', 'rb'))
    start_text = "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å," \
                 " —á—Ç–æ–±—ã –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫‚úÖ)"
    update.effective_message.reply_text(text=start_text)
    question = "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_2


def second_quest(update, context):
    context.user_data['ques1'] = update.message.text
    question = "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_3


def third_quest(update, context):
    context.user_data['ques2'] = update.message.text
    question = "–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_4


def fourth_quest(update, context):
    context.user_data['ques3'] = update.message.text
    question = "–ö–∞–∫–æ–π –≤–µ—Å?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_5


def fifth_quest(update, context):
    context.user_data['ques4'] = update.message.text
    question = "–ö–∞–∫–æ–π —Ä–æ—Å—Ç?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_END


def end_of_questionnaire(update, context):
    context.user_data['ques5'] = update.message.text
    update.effective_message.reply_text(text=f"–ò–º—è:{context.user_data['ques1']}, \n"
                                             f"–í–æ–∑—Ä–∞—Å—Ç:{context.user_data['ques2']}, \n"
                                             f"–ü–æ–ª:{context.user_data['ques3']}, \n"
                                             f"–í–µ—Å:{context.user_data['ques4']}, \n"
                                             f"–†–æ—Å—Ç{context.user_data['ques5']}, \n")
    referal_id = 0
    if context.user_data['ref']:
        referal_id = int(context.user_data['ref'])
    # –î–û–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –ë–î –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞
    session = db_session.create_session()
    user = User(
        referal_owner=int(referal_id),
        telegram_id=str(update.effective_message.chat_id),
        weight=str(context.user_data['ques4']),
        height=str(context.user_data['ques5']),
        sex=str(context.user_data['ques3']),
        age=str(context.user_data['ques2']),
        name=str(context.user_data['ques1']))
    session.add(user)
    session.commit()
    # –î–û–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –ë–î –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞
    update.effective_message.reply_text(text="‚è≥–ü–æ–¥–±–∏—Ä–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏....")
    chat_id = update.message.chat_id
    try:
        delay = 5
        if 'job' in context.chat_data:
            old_job = context.chat_data['job']
            old_job.schedule_removal()
        new_job = context.job_queue.run_once(task, delay, context=chat_id)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞.
        context.chat_data['job'] = new_job
        # –ü—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å.
        # update.message.reply_text(f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥')

    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_timer <—Å–µ–∫—É–Ω–¥>')

    return ConversationHandler.END


def task(context):
    job = context.job
    context.bot.send_message(job.context, text='‚úÖ–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥–æ–±—Ä–∞–Ω!‚úÖ')
    context.bot.send_message(job.context, text='‚ùóÔ∏è–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Ü–µ–ª–∏, –±—É–∫–≤–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Ç—ã —É–≤–∏–¥–∏—à—å'
                                               ' –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –Ω–∏–∂–µ'
                                               ' –∏ –∑–∞–±–∏—Ä–∞–π –ø–µ—Ä–≤—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°‚ùóÔ∏è')
    context.bot.forward_message(job.context, group_with_video_id, 611)
    welcome_text = "–ú–µ–Ω—é –±–æ—Ç–∞"
    context.bot.send_message(job.context, text=welcome_text, reply_markup=get_main_menu_bot_keyboard())
    return ConversationHandler.END


def key_button_handler(update, context):
    query = update.callback_query
    data = query.data
    if data in [CALLBACK_BUTTON_GAIN_WEIGHT, CALLBACK_BUTTON_LOSE_WEIGHT]:
        context_text = "–¢—ã —Å–¥–µ–ª–∞–ª–∞ –µ—â–µ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Ç–µ–ª—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç," \
                       " —á—Ç–æ —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—à—å –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—ÇüèÉ‚Äç‚ôÄÔ∏è"
        context.user_data['kind of training'] = data
        update.effective_message.reply_text(text=context_text)
        context.bot.forward_message(update.effective_message.chat_id, group_with_video_id, 611)
        update.effective_message.reply_text("–∫–∞–∫–∏–µ-—Ç–æ –≤–∏–¥–µ–æ", reply_markup=get_next_inline_keyboard())
    if data == CALLBACK_BUTTON_NEXT:
        return throw_question_body(update=update, context=context)


def throw_question_body(update, context):
    question_text = "–•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π?"
    update.effective_message.reply_text(text=question_text, reply_markup=get_question_other_body_inline_keyboard())
    return OTHER_BODY


def take_message(update, context):
    print(update.message.chat_id, group_with_video_id)
    if str(update.message.chat_id) == str(group_with_video_id):
        print("!!!!")
        update.message.reply_text(text=f"–í–∏–¥–µ–æ ID: {update.message.message_id}")
    else:
        print(",,,,,")
        if update.message.text == BUTTON_BACK:
            update.message.reply_text(text="–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=get_main_menu_bot_keyboard())
        elif update.message.text == BUTTON_PAYMENT:
            update.message.reply_text(text="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", reply_markup=get_PAYMENT_keyboard())
        elif update.message.text == BUTTON_BONUS:
            update.message.reply_text(text="–ë–æ–Ω—É—Å—ã(—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)", reply_markup=get_BONUS_keyboard())
        elif update.message.text == BUTTON_FEEDBACK:
            update.message.reply_text(text="–û —Å–µ–±–µ", reply_markup=get_main_menu_bot_keyboard())
        elif update.message.text == BUTTON_NUMBER_OF_REFERRALS:
            session = db_session.create_session()
            current_user = session.query(User).filter(User.telegram_id == update.message.chat_id).first()
            update.message.reply_text(text=f"{current_user.referals_count}—à—Ç.",
                                      reply_markup=get_main_menu_bot_keyboard())
            session.commit()
        elif update.message.text == BUTTON_BONUS_PACKAGE:
            session = db_session.create_session()
            current_user = session.query(User).filter(User.telegram_id == update.message.chat_id).first()
            update.message.reply_text(text=f"{current_user.balance}—Ä—É–±.", reply_markup=get_main_menu_bot_keyboard())
            session.commit()
        elif update.message.text == BUTTON_LINK:
            update.message.reply_text(
                text=f"–°—Å—ã–ª–∫–∞:http://t.me/trenirovki_test228bot?start=871qXoi359ref={update.message.chat_id} \n"
                     f"–û—Ç–ø—Ä–∞–≤–∏–≤ –µ–µ –¥—Ä—É–∑—å—è–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ 10—Ä!",
                reply_markup=get_main_menu_bot_keyboard())
        else:
            session = db_session.create_session()
            if session.query(User).filter(User.telegram_id == update.message.chat_id).first():
                session.commit()
                welcome_text = "–ú–µ–Ω—é –±–æ—Ç–∞"
                update.message.reply_text(text=welcome_text, reply_markup=get_main_menu_bot_keyboard())
            else:
                welcome_text = "–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ç–µ–ª–∞ —Å–≤–æ–µ–π –º–µ—á—Ç—ã!ü•á"
                update.message.reply_text(text=welcome_text, reply_markup=get_base_inline_keyboard())


def start(update, context):
    context.user_data['ref'] = ""
    session = db_session.create_session()
    if "/start 871qXoi359ref=" in update.message.text:
        id_boss_ref = update.message.text.split("ref=")[-1]
        current_user = session.query(User).filter(User.telegram_id == id_boss_ref).first()
        if current_user and str(update.message.chat_id) not in current_user.referals:
            current_user.referals_count += 1
            current_user.referals += f" {id_boss_ref}"
            current_user.balance += 10
            session.commit()
            context.user_data['ref'] = id_boss_ref
    else:
        if session.query(User).filter(User.telegram_id == update.message.chat_id).first():
            welcome_text = "–ú–µ–Ω—é –±–æ—Ç–∞"
            update.message.reply_text(text=welcome_text, reply_markup=get_main_menu_bot_keyboard())
        else:
            welcome_text = "–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ç–µ–ª–∞ —Å–≤–æ–µ–π –º–µ—á—Ç—ã!ü•á"
            update.message.reply_text(text=welcome_text, reply_markup=get_base_inline_keyboard())
        session.commit()

def main():
    updater = Updater(TOKEN, use_context=True, request_kwargs=request_)
    dispatcher = updater.dispatcher
    questionnaireANDtraining_selection = ConversationHandler(
        entry_points=[CallbackQueryHandler(key_button_handler, pass_chat_data=True)],
        states={
            OTHER_BODY: [CallbackQueryHandler(answer_to_question_other, pass_chat_data=True)],
            QUESTIONNAIRE_2: [MessageHandler(Filters.text, second_quest, pass_user_data=True)],
            QUESTIONNAIRE_3: [MessageHandler(Filters.text, third_quest, pass_user_data=True)],
            QUESTIONNAIRE_4: [MessageHandler(Filters.text, fourth_quest, pass_user_data=True)],
            QUESTIONNAIRE_5: [MessageHandler(Filters.text, fifth_quest, pass_user_data=True)],
            QUESTIONNAIRE_END: [MessageHandler(Filters.text, end_of_questionnaire, pass_user_data=True)],
        },
        fallbacks=[
            CallbackQueryHandler(key_button_handler, pass_chat_data=True),

        ],
    )
    text_handler = MessageHandler(Filters.all, take_message)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    buttons_handler = CallbackQueryHandler(callback=key_button_handler, pass_chat_data=True)
    start_handler = CommandHandler("start", start)
    dispatcher.add_handler(questionnaireANDtraining_selection)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(text_handler)
    dispatcher.add_handler(buttons_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
