# import tdlib
from telegram import InlineKeyboardButton, \
    InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram.ext import CommandHandler
from telegram.ext import Updater, MessageHandler, Filters, ConversationHandler

from data import db_session

db_session.global_init("db/users.sqlite")
TOKEN = "1124731420:AAGQa5H0sNRbumQJI2pqNJmtpct97Hhcgn8"

OTHER_BODY, QUESTIONNAIRE_2, QUESTIONNAIRE_3, QUESTIONNAIRE_4, \
QUESTIONNAIRE_5, QUESTIONNAIRE_END, OTHER_BODY_QUESTION = range(
    7)
CALLBACK_BUTTON_1_MONTH = "CALLBACK_BUTTON_1_MONTH"
CALLBACK_BUTTON_3_MONTH = "CALLBACK_BUTTON_3_MONTH"
CALLBACK_BUTTON_1_YEAR = "CALLBACK_BUTTON_1_YEAR"

CALLBACK_BUTTON_NUMBER_OF_REFERRALS = "CALLBACK_BUTTON_NUMBER_OF_REFERRALS"
CALLBACK_BUTTON_BONUS_PACKAGE = "CALLBACK_BUTTON_BONUS_PACKAGE"
CALLBACK_BUTTON_CANCEL = "CALLBACK_BUTTON_CANCEL"
CALLBACK_BUTTON_PAYMENT = "CALLBACK_BUTTON_PAYMENT"
CALLBACK_BUTTON_BONUS = "CALLBACK_BUTTON_BONUS"
CALLBACK_BUTTON_FEEDBACK = "CALLBACK_BUTTON_FEEDBACK"
CALLBACK_BUTTON_GAIN_WEIGHT = "CALLBACK_BUTTON_GAIN_WEIGHT"
CALLBACK_BUTTON_LOSE_WEIGHT = "CALLBACK_BUTTON_LOSE_WEIGHT"
CALLBACK_BUTTON_I_WANT = "CALLBACK_BUTTON_I_WANT"
CALLBACK_BUTTON_I_DONT_WANT = "CALLBACK_BUTTON_I_DONT_WANT"
CALLBACK_BUTTON_NEXT = "CALLBACK_BUTTON_NEXT"

TITLES = {
    CALLBACK_BUTTON_CANCEL: "–ù–∞–∑–∞–¥ ‚Ü©",
    CALLBACK_BUTTON_1_MONTH: "1 –º–µ—Å—è—Ü",
    CALLBACK_BUTTON_3_MONTH: "3 –º–µ—Å—è—Ü–∞",
    CALLBACK_BUTTON_1_YEAR: "1 –≥–æ–¥",
    CALLBACK_BUTTON_NUMBER_OF_REFERRALS: "–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
    CALLBACK_BUTTON_BONUS_PACKAGE: "–†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞",
    CALLBACK_BUTTON_FEEDBACK: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
    CALLBACK_BUTTON_BONUS: "–ë–æ–Ω—É—Å—ã(—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)",
    CALLBACK_BUTTON_PAYMENT: "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    CALLBACK_BUTTON_NEXT: "–î–∞–ª–µ–µ‚û°Ô∏è",
    CALLBACK_BUTTON_GAIN_WEIGHT: "üèãÔ∏è‚Äç–ù–∞–∫–∞—á–∞—Ç—å—Å—è",
    CALLBACK_BUTTON_LOSE_WEIGHT: "ü§∏–ü–æ—Ö—É–¥–µ—Ç—å",
    CALLBACK_BUTTON_I_WANT: "–î–∞, —Ö–æ—á—É",
    CALLBACK_BUTTON_I_DONT_WANT: "–ù–µ—Ç, –Ω–µ —Ö–æ—á—É"
}

BONUS = 1
def get_cancel_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_CANCEL], callback_data=CALLBACK_BUTTON_CANCEL)]]
    return InlineKeyboardMarkup(keyboard)


def get_FEEDBACK_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_CANCEL], callback_data=CALLBACK_BUTTON_CANCEL)]]
    return InlineKeyboardMarkup(keyboard)


def get_PAYMENT_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_1_MONTH], callback_data=CALLBACK_BUTTON_1_MONTH), ],
                [InlineKeyboardButton(TITLES[CALLBACK_BUTTON_3_MONTH], callback_data=CALLBACK_BUTTON_3_MONTH), ],
                [InlineKeyboardButton(TITLES[CALLBACK_BUTTON_1_YEAR], callback_data=CALLBACK_BUTTON_1_YEAR), ],
                [InlineKeyboardButton(TITLES[CALLBACK_BUTTON_CANCEL], callback_data=CALLBACK_BUTTON_CANCEL)],
                ]
    return InlineKeyboardMarkup(keyboard)


def get_BONUS_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_NUMBER_OF_REFERRALS],
                                      callback_data=CALLBACK_BUTTON_NUMBER_OF_REFERRALS), ],
                [InlineKeyboardButton(TITLES[CALLBACK_BUTTON_BONUS_PACKAGE],
                                      callback_data=CALLBACK_BUTTON_BONUS_PACKAGE), ],
                [InlineKeyboardButton(TITLES[CALLBACK_BUTTON_CANCEL], callback_data=CALLBACK_BUTTON_CANCEL)],
                ]
    return InlineKeyboardMarkup(keyboard)


def get_main_menu_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_PAYMENT], callback_data=CALLBACK_BUTTON_PAYMENT),
                 InlineKeyboardButton(TITLES[CALLBACK_BUTTON_BONUS], callback_data=CALLBACK_BUTTON_BONUS),
                 InlineKeyboardButton(TITLES[CALLBACK_BUTTON_FEEDBACK], callback_data=CALLBACK_BUTTON_FEEDBACK),
                 ]
                ]
    return InlineKeyboardMarkup(keyboard)


def get_next_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_NEXT], callback_data=CALLBACK_BUTTON_NEXT), ]]
    return InlineKeyboardMarkup(keyboard)


def get_base_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_GAIN_WEIGHT], callback_data=CALLBACK_BUTTON_GAIN_WEIGHT),
                 InlineKeyboardButton(TITLES[CALLBACK_BUTTON_LOSE_WEIGHT], callback_data=CALLBACK_BUTTON_LOSE_WEIGHT),
                 ]
                ]
    return InlineKeyboardMarkup(keyboard)


def get_question_other_body_inline_keyboard():
    keyboard = [[InlineKeyboardButton(TITLES[CALLBACK_BUTTON_I_WANT], callback_data=CALLBACK_BUTTON_I_WANT),
                 InlineKeyboardButton(TITLES[CALLBACK_BUTTON_I_DONT_WANT], callback_data=CALLBACK_BUTTON_I_DONT_WANT),
                 ]
                ]
    return InlineKeyboardMarkup(keyboard)


def answer_to_question_other(update, context):
    print("))000")
    query = update.callback_query
    data = query.data
    path_1, path_2 = "", ""
    # if data == CALLBACK_BUTTON_I_WANT:
    #     update.effective_message.reply_text("–î–æ")
    #     update.message.reply_photo(open('scale_1200.jpg', 'rb'))
    #     update.effective_message.reply_text("–ü–æ—Å–ª–µ")
    #     update.message.reply_photo(open('scale_1200.jpg', 'rb'))
    # update.effective_message.reply_text("–§–û–¢–ò –î–û/–ü–û–°–õ–ï")
    if data == CALLBACK_BUTTON_I_DONT_WANT:
        # update.effective_message.reply_text("–§–û–¢–ò –î–û/–ü–û–°–õ–ï")
        update.effective_message.reply_text("–ú—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,"
                                            " —á—Ç–æ–±—ã —Å–∏–ª—å–Ω–µ–µ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≥—Ä—è–¥—É—é—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!")
    print(context.user_data['kind of training'])
    if context.user_data['kind of training'] == CALLBACK_BUTTON_GAIN_WEIGHT:
        update.effective_message.reply_text("–î–æ")
        update.effective_message.reply_photo(open('p1.jpg', 'rb'))
        update.effective_message.reply_text("–ü–æ—Å–ª–µ")
        update.effective_message.reply_photo(open('p2.jpg', 'rb'))
    if context.user_data['kind of training'] == CALLBACK_BUTTON_LOSE_WEIGHT:
        update.effective_message.reply_text("–î–æ")
        update.effective_message.reply_photo(open('p3.jpg', 'rb'))
        update.effective_message.reply_text("–ü–æ—Å–ª–µ")
        update.effective_message.reply_photo(open('p4.jpg', 'rb'))
    start_text = "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å," \
                 " —á—Ç–æ–±—ã –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫‚úÖ)"
    update.effective_message.reply_text(text=start_text)
    question = "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_2


def second_quest(update, context):
    context.user_data['ques1'] = update.message.text
    question = "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_3


def third_quest(update, context):
    context.user_data['ques2'] = update.message.text
    question = "–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_4


def fourth_quest(update, context):
    context.user_data['ques3'] = update.message.text
    question = "–ö–∞–∫–æ–π –≤–µ—Å?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_5


def fifth_quest(update, context):
    context.user_data['ques4'] = update.message.text
    question = "–ö–∞–∫–æ–π —Ä–æ—Å—Ç?"
    update.effective_message.reply_text(text=question)
    return QUESTIONNAIRE_END


def end_of_questionnaire(update, context):
    context.user_data['ques5'] = update.message.text
    update.effective_message.reply_text(text=f"–ò–º—è:{context.user_data['ques1']}, \n"
                                             f"–í–æ–∑—Ä–∞—Å—Ç:{context.user_data['ques2']}, \n"
                                             f"–ü–æ–ª:{context.user_data['ques3']}, \n"
                                             f"–í–µ—Å:{context.user_data['ques4']}, \n"
                                             f"–†–æ—Å—Ç{context.user_data['ques5']}, \n")
    update.effective_message.reply_text(text="‚è≥–ü–æ–¥–±–∏—Ä–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏....")
    chat_id = update.message.chat_id
    try:
        delay = 2
        if 'job' in context.chat_data:
            old_job = context.chat_data['job']
            old_job.schedule_removal()
        new_job = context.job_queue.run_once(task, delay, context=chat_id)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞.
        context.chat_data['job'] = new_job
        # –ü—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å.
        # update.message.reply_text(f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥')

    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_timer <—Å–µ–∫—É–Ω–¥>')

    return ConversationHandler.END


def task(context):
    job = context.job
    context.bot.send_message(job.context, text='‚úÖ–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥–æ–±—Ä–∞–Ω!‚úÖ')
    context.bot.send_message(job.context, text='‚ùóÔ∏è–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Ü–µ–ª–∏, –±—É–∫–≤–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Ç—ã —É–≤–∏–¥–∏—à—å'
                                               ' –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –Ω–∏–∂–µ'
                                               ' –∏ –∑–∞–±–∏—Ä–∞–π –ø–µ—Ä–≤—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°‚ùóÔ∏è')
    welcome_text = "–ú–µ–Ω—é –±–æ—Ç–∞"
    context.bot.send_message(job.context, text=welcome_text, reply_markup=get_main_menu_inline_keyboard())
    # context.bot.send_message(job.context, text='+–≤–∏–¥–µ–æ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
    videos_group = "-368870653"
    main_chat = "419453249"
    # print(update.effective_message.message_id)
    # print(update.effective_message.chat_id)
    print(dir(context.chat_data))
    print(dir(context.user_data))
    print(dir(context.bot), "!@!@@!@")
    print(context.bot.last_name)
    print(context.bot.id)
    # update.effective_message.reply_text(text=update.effective_message.message_id)
    # context.bot.forward_message(context.bot.chat_id, videos_group, 602)
    return ConversationHandler.END


def key_button_handler(update, context):
    # print("!!!!", dir(context.bot))
    # print("???", dir(update.effective_message.chat_id))

    query = update.callback_query
    data = query.data
    if data in [CALLBACK_BUTTON_GAIN_WEIGHT, CALLBACK_BUTTON_LOSE_WEIGHT]:
        context_text = "–¢—ã —Å–¥–µ–ª–∞–ª–∞ –µ—â–µ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Ç–µ–ª—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç," \
                       " —á—Ç–æ —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—à—å –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—ÇüèÉ‚Äç‚ôÄÔ∏è"
        context.user_data['kind of training'] = data
        update.effective_message.reply_text(text=context_text)
        # context.bot.send_video(chat_id=update.effective_message.chat_id, video=open("takoe.mp4", 'rb'),
        #                        supports_streaming=True)
        videos_group = "-368870653"
        main_chat = "419453249"
        # print(update.effective_message.message_id)
        # print(update.effective_message.chat_id)
        # print(dir(context.chat_data))
        # print(dir(context.user_data))
        # print(dir(context.bot))
        # update.effective_message.reply_text(text=update.effective_message.message_id)
        print("!!!!", update.effective_message.chat_id)
        context.bot.forward_message(update.effective_message.chat_id, videos_group, 611)
        update.effective_message.reply_text("–∫–∞–∫–∏–µ-—Ç–æ –≤–∏–¥–µ–æ", reply_markup=get_next_inline_keyboard())
    if data == CALLBACK_BUTTON_NEXT:
        # print("!!!!")
        return throw_question_body(update=update, context=context)
        # return OTHER_BODY_QUESTION
    # CALLBACK_BUTTON_FEEDBACK: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
    # CALLBACK_BUTTON_BONUS: "–ë–æ–Ω—É—Å—ã(—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)",
    # CALLBACK_BUTTON_PAYMENT: "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    if data == CALLBACK_BUTTON_FEEDBACK:
        # update.effective_message.reply_text("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –∏ —Ç—É—Ç —á—Ç–æ-—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å....", reply_markup=get_cancel_inline_keyboard())
        context.bot.edit_message_text(chat_id=update.effective_message.chat_id,
                                      message_id=update.effective_message.message_id,
                                      text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.......", reply_markup=get_FEEDBACK_inline_keyboard())
    if data == CALLBACK_BUTTON_BONUS:
        context.bot.edit_message_text(chat_id=update.effective_message.chat_id,
                                      message_id=update.effective_message.message_id,
                                      text="–ë–æ–Ω—É—Å—ã(—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)", reply_markup=get_BONUS_inline_keyboard())
        # return BONUS
        # update.effective_message.reply_text("–ë–æ–Ω—É—Å—ã(—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)", reply_markup=get_BONUS_inline_keyboard())
    if data == CALLBACK_BUTTON_PAYMENT:
        context.bot.edit_message_text(chat_id=update.effective_message.chat_id,
                                      message_id=update.effective_message.message_id,
                                      text="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", reply_markup=get_PAYMENT_inline_keyboard())

    if data == CALLBACK_BUTTON_CANCEL:
        context.bot.edit_message_text(chat_id=update.effective_message.chat_id,
                                      message_id=update.effective_message.message_id,
                                      text="–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=get_main_menu_inline_keyboard())
        return ConversationHandler.END

    if data == CALLBACK_BUTTON_BONUS_PACKAGE:
        update.effective_message.reply_text("0 —Ä—É–±.", reply_markup=get_cancel_inline_keyboard())
    if data == CALLBACK_BUTTON_NUMBER_OF_REFERRALS:
        update.effective_message.reply_text("0 —à—Ç.", reply_markup=get_cancel_inline_keyboard())
def BONUS_menu(update, context):
    print("QWERTY")
    query = update.callback_query
    data = query.data
    print(data)
    if data == CALLBACK_BUTTON_BONUS_PACKAGE:
        update.effective_message.reply_text("0 —Ä—É–±.", reply_markup=get_cancel_inline_keyboard())
        # context.bot.edit_message_text(chat_id=update.effective_message.chat_id,
        #                               message_id=update.effective_message.message_id,
        #                               text="–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=get_main_menu_inline_keyboard())
    if data == CALLBACK_BUTTON_NUMBER_OF_REFERRALS:
        update.effective_message.reply_text("0 —à—Ç.", reply_markup=get_cancel_inline_keyboard())



def throw_question_body(update, context):
    question_text = "–•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π?"
    update.effective_message.reply_text(text=question_text, reply_markup=get_question_other_body_inline_keyboard())
    return OTHER_BODY


def take_message(update, context):
    # print(dir(update.message))
    # # im = Image.open("scale_1200.jpg")
    # # photo = r'{}\utils\scale_1200.jpg'.format(os.getcwd())
    # # # with open(
    # # #         "scale_1200.jpg", "rb") as file:
    # # #     data = file.read()
    # update.message.reply_photo(open('scale_1200.jpg', 'rb'))
    # videos_group = "-368870653"
    # main_chat = "419453249"
    # print(update.message.message_id)
    # print(update.message.chat_id)
    # print(dir(context.chat_data))
    # print(dir(context.user_data))
    # print(dir(context.bot))
    # update.message.reply_text(text=update.message.message_id)
    # context.bot.forward_message(main_chat, videos_group, update.message.message_id)
    welcome_text = "–ú–µ–Ω—é –±–æ—Ç–∞"
    update.message.reply_text(text=welcome_text, reply_markup=get_main_menu_inline_keyboard())


def start(update, context):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ç–µ–ª–∞ —Å–≤–æ–µ–π –º–µ—á—Ç—ã!ü•á"
    update.message.reply_text(text=welcome_text, reply_markup=get_base_inline_keyboard())


def main():
    updater = Updater(TOKEN, use_context=True, request_kwargs={'read_timeout': 1000, 'connect_timeout': 1000323})
    dispatcher = updater.dispatcher
    questionnaireANDtraining_selection = ConversationHandler(
        entry_points=[CallbackQueryHandler(key_button_handler, pass_chat_data=True)],
        states={
            # OTHER_BODY_QUESTION: [MessageHandler(Filters.text, throw_question_body, pass_user_data=True)],
            BONUS: [CallbackQueryHandler(BONUS_menu, pass_chat_data=True)],
            OTHER_BODY: [CallbackQueryHandler(answer_to_question_other, pass_chat_data=True)],
            QUESTIONNAIRE_2: [MessageHandler(Filters.text, second_quest, pass_user_data=True)],
            QUESTIONNAIRE_3: [MessageHandler(Filters.text, third_quest, pass_user_data=True)],
            QUESTIONNAIRE_4: [MessageHandler(Filters.text, fourth_quest, pass_user_data=True)],
            QUESTIONNAIRE_5: [MessageHandler(Filters.text, fifth_quest, pass_user_data=True)],
            QUESTIONNAIRE_END: [MessageHandler(Filters.text, end_of_questionnaire, pass_user_data=True)],

            # FINAL_ADDING_USER: [
            #     MessageHandler(Filters.photo, add_user_final, pass_chat_data=True)],
        },
        fallbacks=[
            CallbackQueryHandler(key_button_handler, pass_chat_data=True),

        ],
    )
    text_handler = MessageHandler(Filters.all, take_message)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    buttons_handler = CallbackQueryHandler(callback=key_button_handler, pass_chat_data=True)
    start_handler = CommandHandler("start", start)
    dispatcher.add_handler(questionnaireANDtraining_selection)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(text_handler)
    dispatcher.add_handler(buttons_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
